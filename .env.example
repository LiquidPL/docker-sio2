DEBUG=False

# Site name displayed (for instance) in the upper left corner of the website.
SITE_NAME=OIOIOI

# URL at which the website will be served.
PUBLIC_ROOT_URL=https://example.com

# A list of website administrators and their emails, formated as:
# <name>|<email>, and separated by semicolons.
ADMINS=Your Name|youremail@example.com;Admin|admin@example.com

# Email address from which messages to users will be sent.
DEFAULT_FROM_EMAIL=webmaster@example.com

# Email address to which any messages from Let's Encrypt
# (ie. certificate expiration warnings) will be sent.
LETSENCRYPT_EMAIL=webmaster@example.com

# These are related to the administrative PostgreSQL user,
# set a secure password here, but don't touch it otherwise.
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password

# Available options: postgresql_psycopg2, mysql, sqlite3, oracle.
DATABASE_BACKEND=postgresql_psycopg2
DATABASE_NAME=database
DATABASE_USERNAME=username
DATABASE_PASSWORD=password
DATABASE_HOST=postgres
DATABASE_PORT=5432

# Django's ALLOWED_HOSTS setting.
# This is a list of hostnames that the web app will allow to be served from.
# Addresses are separated by spaces.
ALLOWED_HOSTS=localhost 127.0.0.1

# Local time zone for this installation. Choices can be found here:
# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TIME_ZONE=Europe/Warsaw

LANGUAGE_CODE=en

# Generate an unique, secure key, and don't share it with anyone!
SECRET_KEY=notreallysecret

# The prefix which is appended to emails sent by the website.
# Please note that an additional space is appended after this string.
# EMAIL_SUBJECT_PREFIX=[OIOIOI]
# EMAIL_USE_TLS=False
# EMAIL_HOST=mail
# EMAIL_PORT=25
# EMAIL_HOST_USER=user
# EMAIL_HOST_PASSWORD=password

# Set this to True once you've configured the above values
# to point to a valid SMTP server.
# SEND_USER_ACTIVATION_EMAIL=False

# Address at which the RabbitMQ instance is located.
BROKER_URL=amqp://guest:guest@sio2-rabbitmq:5672//


# Uncomment to allow remote connections.
FILETRACKER_LISTEN_ADDR=0.0.0.0

# Uncomment and change to run filetracker on a non-default port.
FILETRACKER_LISTEN_PORT=9999

# URL to which remote workers will connect.
FILETRACKER_URL=http://localhost:9999

# Set this to 0.0.0.0 for sioworkers to accept remote connections.
SIOWORKERS_LISTENER_ADDR=0.0.0.0

RUN_SIOWORKERSD=True

# Available options: contest_neutral, contest_if_possible, contest_only.
# Please consult the oioioi's settings.py file in order to learn more about those.
# CONTEST_MODE=contest_if_possible

# Uncomment once you've run ./manage.py download_sandboxes and
# you want to use downloaded sandboxes and compilers
# USE_UNSAFE_EXEC=False
# USE_LOCAL_COMPILERS=False

# Uncomment to disable local workers
# RUN_LOCAL_WORKERS=False

# Current options are:
# - "vcpu" - (default) OITimeTool
# - "sio2jail" - SIO2Jail
# - "cpu" - ptrace (measures real time)
# DEFAULT_SAFE_EXECUTION_MODE=vcpu

# Upper bound for the tests' execution time (in milliseconds).
# MAX_TEST_TIME_LIMIT_PER_PROBLEM=

# Upper bound for the memory used during execution of a test (in kibibytes).
# MAX_MEMORY_LIMIT_FOR_TEST

# UWSGI_USE_GEVENT=False

# PROBLEMSET_LINK_VISIBLE=True
# PROBLEM_TAGS_VISIBLE=False

# Enables tracking problem statistics at a slight performance hit.
# PROBLEM_STATISTICS_AVAILABLE=True

# EVERYBODY_CAN_ADD_TO_PROBLEMSET=False

# Number of concurrently evaluated submissions.
# EVALMGR_CONCURRENCY=1

# Number of concurrently processed test packages.
# UNPACKMGR_CONCURRENCY=1

# Uncomment those and point MEMCACHED_LOCATION to your memcached server in order to enable it.
# MEMCACHED_ENABLED=True
# MEMCACHED_LOCATION=
